services:
  # Dev docker compose
  frontend-dev:
    image: arbitaja/dev/frontend
    container_name: dev_frontend
    profiles: [dev]
    restart: always
    build:
      context: frontend/
      dockerfile: ../docker-build/dev/dev-frontend.dockerfile
    ports:
      - 3000:3000
    volumes:
      - ./frontend/public:/opt/arbitaja-frontend/public
      - ./frontend/src:/opt/arbitaja-frontend/src
  backend-dev:
    image: arbitaja/dev/backend
    container_name: dev_backend
    profiles: [dev]
    restart: always
    depends_on:
     - db
    build:
      context: backend/
      dockerfile: ../docker-build/dev/dev-backend.dockerfile
    volumes:
      - ./backend/src:/opt/arbitaja/src
      - ./backend/target:/opt/arbitaja/target
    env_file:
      - ./.env

  proxy:
    image: nginx
    container_name: dev_proxy
    restart: always
    depends_on:
     - frontend-dev
     - backend-dev
    profiles:
      - dev
    build:
      context: docker-build/dev
      dockerfile: dev-proxy.dockerfile
    ports:
      - 80:80

  # Prod docker compose
  frontend:
    image: arbitaja/prod/frontend
    container_name: frontend
    profiles:
      - prod
    restart: always
    depends_on:
      - backend
    build:
      context: frontend/
      dockerfile: ../docker-build/prod/prod-frontend.dockerfile
    ports:
      - 80:80

  backend:
    image: arbitaja/prod/backend
    container_name: backend
    profiles:
      - prod
    restart: always
    depends_on:
     - db
    build:
      context: backend/
      dockerfile: ../docker-build/prod/prod-backend.dockerfile
    env_file:
      - ./.env

  # Generic Docker compose
  db:
    image: arbitaja/postgres:17
    container_name: postgresql
    restart: always
    profiles: 
      - dev
      - prod
    volumes:
      - ./database_data:/var/lib/postgresql/data
    build:
      context: ./docker-build
      dockerfile: postgres.dockerfile 
    env_file:
      - ./.env
