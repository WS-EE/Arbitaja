//User Data
Table "user" {
  "id" INTEGER [pk, increment]
  "default_token_id" int
  "username" varchar [unique]
  "salted_password" varchar [note: '????? not sure not yet']
  "personal_data_id" integer
}

Table "personal_data" {
  "id" INTEGER [pk, increment]
  "full_name" varchar
  "email" varchar
  "school_id" integer
  "created_at" timestamp
}

Table "school" {
  "id" INTEGER [pk, increment]
  "name" varchar
  "created_at" timestamp
}

// Permissions tables
Table "role" {
  "id" INTEGER [pk, increment]
  "name" varchar
  "created_at" timestamp
  "changed_at" timestamp
}

Table "role_relation" {
  "id" INT [pk, increment]
  "role_id" int
  "parent_role_id" int
  "child_role_id" int
}

Table "permission" {
  "id" INTEGER [pk, increment]
  "name" varchar
  "key" varchar
  "key_object" varchar [note: 'Define the object that this key limits. For example: "scoring_criteria"']
}

Table "role_permissions" {
  "id" INTEGER [pk, increment]
  "permission_id" integer
  "role_id" integer
  "key_object_acl" jsonb [note: 'Limit defined objects within the key span']
}

Table "user_role" {
  "id" INTEGER [pk, increment]
  "user_id" integer
  "role_id" integer
  "created_at" timestamp
}

// Competition tables
Table "competition" {
  "id" INTEGER [pk, increment]
  "name" varchar
  "organizer_id" int
  "scoring_criteria_group_main_id" integer
  "start_time" timestamp
  "end_time" timestamp
  "score_showtime" timestamp
  "publish_scores" bool
}

Table "competitor" {
  "id" INTEGER [pk, increment]
  "public_display_name_type" integer [note: '1 - full_name, 2 - school, 3 - alias']
  "alias" varchar [note: 'For anonymose alias']
  "personal_data_id" integer
}

Table "competitor_competition" {
  "id" INTEGER [pk, increment]
  "competitor_id" integer
  "competition_id" integer
}

// Allow user to signup
Table "signup_user" {
  "id" INTEGER [pk, increment]
  "username" varchar [unique]
  "salted_password" varchar
  "personal_data_id" int [not null]
  "is_approved" bool [not null]
  "created_at" timestamp [not null]
}

Table "scoring_groups_structure" {
  "id" INTEGER [pk, increment]
  "name" varchar
  "description" text
  "competitor_id" int
  "scoring_parent_group_id" integer [note: 'This can be also used to generate api endpoint: https://stackoverflow.com/questions/47341764/self-referencing-table-sql-query']
  "structure_group_type" int [note: '1 - competition parent, 2 - template, 3 - competitior']
  "dynamic_variables" jsonb [note: 'To add custom variables that were defined within template and later defined for competitor side.']
}

Table "scoring_criteria" {
  "id" INTEGER [pk, increment]
  "scoring_host_id" integer
  "name" varchar [note: 'Give a name to criteria']
  "description" text [note: 'Custom text to descripe criteria']
  "is_manual" bool [note: '''If we know a criteria can\'t be done automatically marked this to true.''']
  "total_points" float [note: 'Points to give']
  "is_generalized" bool [note: 'Generlize to specific users during competition timeframe']
  "expected_result" text [note: 'What was the data we checked for']
  "criteria_template_id" int
  "is_template" bool
  "visibility_level" int
}

Table "competition_scoring_criteria" {
  "id" INTEGER [pk, increment]
  "competition_id" integer
  "criteria_id" integer
}

Table "criteria_dependency" {
  "id" INTEGER [pk, increment]
  "criteria_id" integer
  "dependent_on_criteria_id" integer
}

Table "scoring_host" {
  "id" INTEGER [pk, increment]
  "ip" varchar
  "hostname" varchar
  "scoring_group_id" integer
  "host_template_id" int
  "is_template" bool
  "is_generalized" bool [note: 'Generlize to specific users during competition timeframe']
}

// Create a table for logical groups for scoring
// These are seprate from the strucure
Table "scoring_logical_groups" {
  "id" INTEGER [pk, increment]
  "name" varchar
  "is_generalized" bool [note: 'Generlize to specific users during competition timeframe']
}

Table "logical_group_link" {
  "id" INTEGER [pk, increment]
  "logical_group_id" int
  "scoring_host_id" int
  "scoring_criteria_id" int
}

// Scoring history
Table "scoring_history" {
  "id" INTEGER [pk, increment]
  "competitor_id" integer
  "competition_id" integer
  "scoring_host_id" integer
  "scoring_criteria_id" integer
  "points_given" float
  "result" text
  "created_at" timestamp
  "deleted_at" timestamp
  "added_by_user_id" integer
}

// Create an api tokens for auth
Table "api_token" {
  "id" INT [pk, increment]
  "user_id" int
  "name" varchar
  "token" varchar
}

// Automatic scoring tables
Table "scoring_agent" {
  "id" INTEGER [pk, increment]
  "scoring_host_id" integer
  "scoring_criteria_id" integer
  "scoring_agent_transport_id" integer
  "script_id" integer
  "token_id" int
  "authentication_type" int
  "agent_type" int [note: '1 - agent push, 2 - server pull, 3 - api only']
  "agent_proxy_id" int [note: 'Maybe we can deploy a proxy']
  "custom_api_endpoint" varchar [note: 'possible custom api endpoint']
}

Table "script" {
  "id" INTEGER [pk, increment]
  "name" varchar
  "type" varchar [note: 'powershell, bash etc.']
  "script" text
}

Table "scoring_agent_transport" {
  "id" INTEGER [pk, increment]
  "name" varchar [note: 'ssh, http, winrm, bot etc.']
  "tcp_port" int
  "ssh_key" varchar [note: 'used for ssh']
}

// Agent Proxy server
Table "agent_proxy" {
  "id" INT [pk, increment]
  "ip" varchar
  "name" varchar
  "competition_id" int
  "token_id" int [note: 'Will be used for authentication']
  "authentication_type" int
}

Ref:"personal_data"."id" < "user"."personal_data_id"

Ref:"school"."id" < "personal_data"."school_id"

Ref:"role"."id" < "role_relation"."parent_role_id"

Ref:"role"."id" < "role_relation"."child_role_id"

Ref:"role"."id" < "role_relation"."role_id"

Ref:"role"."id" < "role_permissions"."role_id"

Ref:"permission"."id" < "role_permissions"."permission_id"

Ref:"user"."id" < "user_role"."user_id"

Ref:"role"."id" < "user_role"."role_id"

Ref:"user"."id" < "competition"."organizer_id"

Ref:"personal_data"."id" < "competitor"."personal_data_id"

Ref:"competition"."id" < "competitor_competition"."competition_id"

Ref:"competitor"."id" < "competitor_competition"."competitor_id"

Ref:"personal_data"."id" < "signup_user"."personal_data_id"

Ref:"competitor"."id" < "scoring_groups_structure"."competitor_id"

Ref:"scoring_criteria"."id" < "competition_scoring_criteria"."criteria_id"

Ref:"competition"."id" < "competition_scoring_criteria"."competition_id"

Ref:"scoring_criteria"."id" < "criteria_dependency"."criteria_id"

Ref:"scoring_criteria"."id" < "criteria_dependency"."dependent_on_criteria_id"

Ref:"scoring_host"."id" < "scoring_host"."host_template_id"

Ref:"scoring_host"."id" < "scoring_criteria"."scoring_host_id"

Ref:"scoring_groups_structure"."id" < "scoring_host"."scoring_group_id"

Ref:"scoring_groups_structure"."id" < "competition"."scoring_criteria_group_main_id"

Ref:"scoring_groups_structure"."id" < "scoring_groups_structure"."scoring_parent_group_id"

Ref:"scoring_logical_groups"."id" < "logical_group_link"."logical_group_id"

Ref:"scoring_host"."id" < "logical_group_link"."scoring_host_id"

Ref:"scoring_criteria"."id" < "logical_group_link"."scoring_criteria_id"

Ref:"scoring_host"."id" < "scoring_history"."scoring_host_id"

Ref:"user"."id" < "scoring_history"."added_by_user_id"

Ref:"competitor"."id" < "scoring_history"."competitor_id"

Ref:"competition"."id" < "scoring_history"."competition_id"

Ref:"scoring_criteria"."id" < "scoring_history"."scoring_criteria_id"

Ref:"api_token"."id" < "user"."default_token_id"

Ref:"user"."id" < "api_token"."user_id"

Ref:"api_token"."id" < "scoring_agent"."token_id"

Ref:"scoring_host"."id" < "scoring_agent"."scoring_host_id"

Ref:"scoring_criteria"."id" < "scoring_agent"."scoring_criteria_id"

Ref:"script"."id" < "scoring_agent"."script_id"

Ref:"scoring_agent_transport"."id" < "scoring_agent"."scoring_agent_transport_id"

Ref:"api_token"."id" < "agent_proxy"."token_id"

Ref:"competition"."id" < "agent_proxy"."competition_id"

Ref:"agent_proxy"."id" < "scoring_agent"."agent_proxy_id"
