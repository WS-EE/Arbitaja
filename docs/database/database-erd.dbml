// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs
// 
// Link to this dbml fail on dbdiagram.io
// https://dbdiagram.io/d/Arbitaja-6739b785e9daa85acab68596
//

//User Data
Table user {
  id integer [primary key]
  username varchar
  salted_password varchar [note: "????? not sure not yet"]
  personal_data_id integer
}

table personal_data {
  id integer [primary key]
  full_name varchar
  email varchar
  alias varchar [note: "For anonymose alias"]
  school_id integer
  created_at timestamp
}
ref: user.personal_data_id - personal_data.id

table school {
  id integer [primary key]
  name varchar
  created_at timestamp
}
Ref: school.id < personal_data.school_id


// Permissions tables
Table roles {
  id integer [primary key]
  parent_roles_id array
  child_roles_id array
  name varchar
  created_at timestamp
  changed_at timestamp
}
Ref: roles.parent_roles_id <> roles.id
Ref: roles.child_roles_id <> roles.id

Table permission {
  id integer [primary key]
  name varchar
  key varchar
  key_object varchar [note: 'Define the object that this key limits. For example: "scoring_criteria"']
}
Ref: roles.id < role_permissions.role_id

table role_permissions {
  id integer [primary key]
  permission_id integer
  role_id integer
  key_object_acl jsonb [note: 'Limit defined objects within the key span']
}

table user_roles {
  id integer [primary key]
  user_id integer
  role_id integer
  created_at timestamp
}
Ref: permission.id < role_permissions.permission_id
Ref: user_roles.user_id > user.id
Ref: roles.id < user_roles.role_id


// Competition tables
table competitions {
  id integer [primary key]
  name varchar
  competition_id integer
  scoring_criteria_group_main_id integer
  start_time time
  end_time time
}

table competitor {
  id integer [primary key]
  public_display_name_type integer [note: "1 - full_name, 2 - school, 3 - alias"]
  personal_data_id integer
}
ref: competitor.personal_data_id - personal_data.id

table competitor_competitions {
  id integer
  competitor_id integer
  competition_id integer
}
Ref: competitions.id < competitor_competitions.competition_id
Ref: competitor.id < competitor_competitions.competitor_id


// Basic scoring data tables
table scoring_groups_structure {
  id integer [primary key]
  name varchar
  description text
  scoring_parent_group_id integer [note: 'This can be also used to generate api endpoint: https://stackoverflow.com/questions/47341764/self-referencing-table-sql-query']
  scoring_criteria_id integer
}

table scoring_criteria {
  id integer [primary key]
  scoring_host_id integer
  name varchar [note: 'Give a name to criteria']
  description text [note: 'Custom text to descripe criteria']
  is_manual bool [note: 'If we know a criteria can\'t be done automatically marked this to true.']
  total_points float [note: 'Points to give']
  generalized bool [note: "Generlize to specific users during competition timeframe"]
  expected_result text [note: 'What was the data we checked for']
}

table scoring_host {
  id integer [primary key]
  ip ip
  hostname varchar
  scoring_group_id integer
}
ref: scoring_criteria.scoring_host_id > scoring_host.id
Ref: scoring_groups_structure.id < scoring_host.scoring_group_id
Ref: competitions.scoring_criteria_group_main_id - scoring_groups_structure.id
Ref: scoring_groups_structure.scoring_parent_group_id < scoring_groups_structure.id

// Create a table for logical groups for scoring
// These are seprate from the strucure
table scoring_logical_groups {
  id integer
  parent_structure_group_id integer
  scoring_criteria_ids array
}
ref: scoring_logical_groups.parent_structure_group_id > scoring_groups_structure.id
ref: scoring_logical_groups.scoring_criteria_ids > scoring_criteria.id

// Scoring history
table scoring_history {
  id integer [primary key]
  competitor_id integer
  competition_id integer
  scoring_host_id integer
  scoring_criteria_id integer
  points_given float
  result text
  created_at timestamp
  added_by_user_id integer
}
ref: scoring_host.id < scoring_history.scoring_host_id
Ref: scoring_history.added_by_user_id > user.id
Ref: competitor.id < scoring_history.competitor_id
ref: scoring_history.competition_id > competitions.id
Ref: scoring_criteria.id < scoring_history.scoring_criteria_id

// Automatic scoring tables
table scoring_agent {
  id integer [primary key]
  scoring_host_id integer
  scoring_criteria_id integer
  scoring_agent_transport_id integer
  script_type_id integer
  script text
}
ref: scoring_agent.scoring_host_id > scoring_host.id
Ref: scoring_criteria.id < scoring_agent.scoring_criteria_id
table script_type {
  id integer [primary key]
  name varchar [note: 'powershell, bash etc.']
}
table scoring_agent_transport {
  id integer [primary key]
  name varchar [note: 'ssh, http, winrm etc.']
}
Ref: script_type.id < scoring_agent.script_type_id
Ref: scoring_agent_transport.id < scoring_agent.scoring_agent_transport_id