// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

//User Data
Table users {
  id integer [primary key]
  username varchar
  salted_password varchar [note: "????? not sure not yet"]
  full_name varchar
  email varchar
  alias varchar [note: "For anonymose alias"]
  school_id integer
  public_display_name_type integer [note: "1 - full_name, 2 - school, 3 - alias"]
  created_at timestamp
}

table schools {
  id integer [primary key]
  name varchar
  created_at timestamp
}
Ref: schools.id < users.school_id


// Permissions tables
Table roles {
  id integer [primary key]
  parent_roles_id integer
  name varchar
  created_at timestamp
  changed_at timestamp
}

Table permissions {
  id integer [primary key]
  permission_name varchar
  permission_key varchar
}
Ref: roles.id < role_permissions.role_id

table role_permissions {
  id integer [primary key]
  permission_id integer
  role_id integer
  additional_data jsonb [note: "If we want to limit the different skills/competitions seen by role. For example: {\"skill_alias\": \"skill39\"} to limit users view to only skill39 competition."]
}

table user_roles {
  id integer [primary key]
  user_id integer
  role_id integer
  created_at timestamp
}
Ref: permissions.id < role_permissions.permission_id
Ref: roles.parent_roles_id < roles.id
Ref: user_roles.user_id > users.id
Ref: roles.id < user_roles.role_id


// Competition tables
table skills {
  id integer [primary key]
  name varchat [note: "Skill39"]
  alias varchar [note: "IT network and system administrator"]
}
table competitions {
  id integer [primary key]
  name varchar
  created_at timestamp
}
table competition_skills {
  id integer [primary key]
  skill_id integer
  competition_id integer
  scoring_criteria_group_id integer
}

table user_competitions {
  id integer
  user_id integer
  competition_skill_id integer
}
Ref: skills.id < competition_skills.skill_id
Ref: competition_skills.id < user_competitions.competition_skill_id
Ref: competition_skills.competition_id > competitions.id
Ref: users.id < user_competitions.user_id


// Basic scoring data tables
table scoring_data {
  id integer [primary key]
  scoring_criteria_group_id integer
}

table scoring_groups {
  id integer [primary key]
  name varchar
  description text
  scoring_parent_group_id integer [note: 'This can be also used to generate api endpoint: https://stackoverflow.com/questions/47341764/self-referencing-table-sql-query']
  scoring_criteria_id integer
}
table scoring_criteria {
  id integer [primary key]
  name varchar [note: 'Give a name to criteria']
  description text [note: 'Custom text to descripe criteria']
  is_manual bool [note: 'If we know a criteria can\'t be done automatically marked this to true.']
  points float [note: 'Points to give']
}

table scoring_criteria_groups {
  id integer [primary key]
  scoring_group_id integer
  scoring_criteria_id integer
}
Ref: scoring_groups.id < scoring_criteria_groups.scoring_group_id
Ref: scoring_criteria.id < scoring_criteria_groups.scoring_criteria_id
Ref: competition_skills.scoring_criteria_group_id - scoring_groups.id
Ref: scoring_groups.scoring_parent_group_id < scoring_groups.id


// Scoring history
table scoring_history {
  id integer [primary key]
  user_id integer
  scoring_criteria_id integer
  points float
  created_at timestamp
}
Ref: users.id < scoring_history.user_id
Ref: scoring_criteria.id < scoring_history.scoring_criteria_id

// Automatic scoring tables
table scoring_agent {
  id integer [primary key]
  scoring_criteria_id integer
  scoring_agent_transport_id integer
  script_type_id integer
  script text
}
Ref: scoring_criteria.id < scoring_agent.scoring_criteria_id
table script_type {
  id integer [primary key]
  name varchar [note: 'powershell, bash etc.']
}
table scoring_agent_transport {
  id integer [primary key]
  name varchar [note: 'ssh, http, winrm etc.']
}
Ref: script_type.id < scoring_agent.script_type_id
Ref: scoring_agent_transport.id < scoring_agent.scoring_agent_transport_id